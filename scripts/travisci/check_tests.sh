#!/usr/bin/env bash

### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_cron="off"

print_help ()
{
	printf '%s\n' "Script to run garage tests in Travis CI"
	printf 'Usage: %s [--(no-)cron] [-h|--help]\n' "$0"
	printf '\t%s\n' "--cron,--no-cron: Only run tests for cron job (off by default)"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-cron|--cron)
				_arg_cron="on"
				test "${1:0:5}" = "--no-" && _arg_cron="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

### END OF CODE GENERATED BY Argbash ### ])

./cc-test-reporter before-build
if [[ "${_arg_cron}" = on ]]; then
  coverage run -m nose2 -c setup.cfg -A cron_job
else
  coverage run -m nose2 -c setup.cfg -E 'not cron_job and not huge'
fi
TEST_EXIT_CODE="$?"
coverage xml
bash <(curl -s https://codecov.io/bash)
coveralls
python-codacy-coverage -r coverage.xml
./cc-test-reporter after-build --exit-code $TEST_EXIT_CODE
